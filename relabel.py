from turtle import color
import pandas as pd 
import matplotlib.pyplot as plt
from collections import Counter

def get_color(cluster):
    color_arr = ['red', 'green', 'darkorange', 'blue']
    return color_arr[cluster]


label_results = [(100, 1), (100, 2), (101, 0), (102, 1), (103, 3), (104, 3), (105, 3), (106, 0), (107, 0), (108, 0), (109, 3), (10, 3), (110, 1), (111, 3), (112, 1), (113, 0), (114, 0), (116, 0), (117, 0), (118, 3), (119, 0), (120, 0), (123, 3), (125, 3), (126, 2), (127, 0), (128, 0), (129, 3), (12, 3), (130, 0), (131, 0), (132, 3), (133, 2), (136, 3), (137, 3), (138, 1), (139, 3), (13, 0), (140, 1), (141, 0), (142, 2), (143, 0), (144, 1), (144, 2), (145, 2), (146, 1), (148, 0), (149, 2), (14, 1), (150, 2), (151, 2), (153, 2), (154, 1), (154, 2), (155, 1), (156, 3), (157, 2), (158, 3), (159, 0), (15, 3), (160, 2), (161, 3), (162, 2), (163, 3), (165, 3), (166, 2), (167, 0), (168, 3), (169, 0), (16, 1), (170, 0), (171, 1), (171, 2), (172, 2), (173, 3), (174, 0), (175, 0), (176, 1), (177, 3), (179, 2), (17, 0), (180, 0), (181, 2), (182, 0), (183, 1), (183, 2), (184, 2), (185, 1), (186, 0), (187, 3), (188, 1), (189, 1), (189, 2), (18, 0), (190, 2), (191, 3), (192, 3), (193, 1), (193, 2), (194, 0), (195, 3), (196, 0), (197, 2), (198, 1), (198, 2), (199, 2), (19, 3), (1, 1), (20, 1), (20, 2), (21, 3), (22, 0), (23, 3), (24, 1), (24, 2), (25, 1), (26, 0), (27, 1), (28, 1), (29, 3), (2, 0), (30, 3), (31, 3), (32, 3), (33, 3), (34, 0), (35, 0), (36, 0), (37, 1), (37, 2), (3, 0), (42, 2), (44, 0), (45, 2), (46, 1), (48, 0), (49, 0), (4, 2), (50, 0), (51, 3), (52, 1), (53, 1), (54, 3), (57, 1), (57, 2), (59, 2), (5, 1), (5, 2), (60, 0), (61, 3), (62, 1), (62, 2), (63, 1), (64, 3), (65, 1), (65, 2), (66, 3), (67, 3), (68, 3), (69, 1), (69, 2), (6, 2), (70, 2), (71, 3), (72, 1), (73, 1), (74, 1), (75, 0), (76, 2), (77, 1), (78, 1), (79, 1), (80, 0), (81, 2), (82, 0), (83, 1), (84, 2), (85, 1), (85, 2), (88, 1), (89, 1), (8, 3), (90, 1), (90, 2), (91, 3), (93, 3), (94, 0), (95, 2), (96, 2), (97, 1), (99, 3)]
label_results = [(0, 0), (100, 2), (101, 1), (102, 0), (103, 3), (104, 3), (105, 3), (106, 1), (107, 1), (108, 1), (109, 3), (10, 3), (110, 0), (111, 3), (112, 0), (113, 1), (114, 3), (115, 0), (116, 1), (117, 1), (118, 3), (119, 1), (11, 1), (120, 1), (121, 1), (122, 0), (123, 3), (124, 0), (125, 3), (126, 2), (127, 1), (128, 1), (129, 3), (12, 3), (130, 1), (131, 1), (132, 3), (133, 2), (134, 0), (135, 1), (136, 3), (137, 3), (138, 0), (139, 3), (13, 1), (140, 0), (141, 1), (142, 2), (143, 1), (144, 2), (145, 2), (146, 0), (147, 1), (148, 1), (149, 2), (14, 0), (150, 2), (151, 2), (152, 1), (153, 2), (154, 2), (155, 0), (156, 2), (157, 2), (158, 3), (159, 1), (15, 3), (160, 2), (161, 3), (162, 2), (163, 3), (164, 0), (165, 3), (166, 2), (167, 1), (168, 3), (169, 1), (16, 0), (170, 1), (171, 2), (172, 2), (173, 3), (174, 1), (175, 3), (176, 0), (177, 3), (178, 1), (179, 2), (17, 3), (180, 1), (181, 2), (182, 1), (183, 2), (184, 2), (185, 0), (186, 1), (187, 3), (188, 0), (189, 2), (18, 1), (190, 2), (191, 3), (192, 3), (193, 2), (194, 3), (195, 3), (196, 1), (197, 2), (198, 2), (199, 2), (19, 3), (1, 0), (20, 2), (21, 3), (22, 1), (23, 3), (24, 2), (25, 0), (26, 1), (27, 0), (28, 2), (29, 3), (2, 1), (30, 3), (31, 3), (32, 3), (33, 3), (34, 1), (35, 1), (36, 1), (37, 2), (38, 1), (39, 0), (3, 1), (40, 0), (41, 0), (42, 2), (43, 0), (44, 1), (45, 2), (46, 0), (47, 0), (48, 1), (49, 1), (4, 2), (50, 1), (51, 2), (52, 0), (53, 0), (54, 3), (55, 0), (56, 0), (57, 2), (58, 1), (59, 2), (5, 2), (60, 3), (61, 2), (62, 0), (63, 0), (64, 3), (65, 2), (66, 3), (67, 3), (68, 3), (69, 2), (6, 2), (70, 2), (71, 3), (72, 0), (73, 0), (74, 0), (75, 1), (76, 2), (77, 0), (78, 0), (79, 0), (7, 0), (80, 1), (81, 2), (82, 3), (83, 0), (84, 2), (85, 2), (86, 0), (87, 0), (88, 0), (89, 0), (8, 3), (90, 2), (91, 3), (92, 0), (93, 3), (94, 1), (95, 2), (96, 2), (97, 0), (98, 0), (99, 3), (9, 0)]
label_results = [(0, 0), (100, 1), (101, 0), (102, 3), (103, 3), (104, 3), (105, 1), (106, 1), (107, 1), (108, 3), (109, 0), (10, 2), (110, 3), (111, 0), (112, 1), (113, 3), (114, 0), (115, 1), (116, 1), (117, 3), (118, 1), (119, 1), (11, 1), (120, 1), (121, 0), (122, 3), (123, 0), (124, 3), (125, 2), (126, 1), (127, 1), (128, 3), (129, 1), (12, 3), (130, 1), (131, 3), (132, 2), (133, 0), (134, 1), (135, 3), (136, 3), (137, 0), (138, 3), (139, 0), (13, 1), (140, 1), (141, 2), (142, 1), (143, 2), (144, 2), (145, 0), (146, 1), (147, 2), (148, 2), (149, 2), (14, 0), (150, 2), (151, 2), (152, 0), (153, 2), (154, 2), (155, 3), (156, 1), (157, 3), (158, 2), (159, 3), (15, 3), (160, 3), (161, 2), (162, 1), (163, 3), (164, 1), (165, 3), (166, 2), (167, 2), (168, 3), (169, 1), (16, 0), (170, 3), (171, 3), (172, 1), (173, 2), (174, 2), (175, 1), (176, 0), (177, 2), (178, 1), (179, 0), (17, 1), (180, 2), (181, 2), (182, 3), (183, 3), (184, 2), (185, 3), (186, 2), (187, 1), (188, 2), (189, 2), (18, 1), (190, 2), (191, 3), (192, 2), (193, 3), (194, 3), (195, 1), (196, 3), (197, 2), (198, 1), (199, 0), (19, 3), (1, 0), (20, 2), (21, 3), (22, 1), (23, 3), (24, 0), (25, 0), (26, 1), (27, 0), (28, 2), (29, 3), (2, 1), (30, 1), (31, 3), (32, 3), (33, 3), (34, 1), (35, 1), (36, 1), (37, 2), (38, 1), (39, 0), (3, 1), (40, 0), (41, 0), (42, 2), (43, 0), (44, 1), (45, 2), (46, 0), (47, 0), (48, 1), (49, 1), (4, 2), (50, 1), (51, 2), (52, 0), (53, 0), (54, 3), (55, 0), (56, 0), (57, 2), (58, 1), (59, 2), (5, 2), (60, 3), (61, 2), (62, 0), (63, 0), (64, 3), (65, 2), (66, 3), (67, 3), (68, 3), (69, 2), (6, 2), (70, 2), (71, 3), (72, 0), (73, 0), (74, 0), (75, 1), (76, 2), (77, 0), (78, 0), (79, 0), (7, 0), (80, 1), (81, 2), (82, 3), (83, 0), (84, 2), (85, 2), (86, 0), (87, 0), (88, 0), (89, 0), (8, 3), (90, 2), (91, 3), (92, 0), (93, 3), (94, 1), (95, 2), (96, 2), (97, 0), (98, 0), (99, 3), (9, 0)]
label_results = [(0, 1), (100, 2), (101, 1), (102, 3), (103, 1), (104, 1), (105, 3), (106, 0), (107, 0), (108, 2), (109, 2), (10, 3), (110, 2), (111, 2), (112, 2), (113, 2), (114, 0), (115, 3), (116, 3), (117, 0), (118, 3), (119, 2), (11, 1), (120, 3), (121, 0), (122, 1), (123, 3), (124, 3), (125, 0), (126, 2), (127, 3), (128, 3), (129, 2), (12, 1), (130, 1), (131, 1), (132, 3), (133, 0), (134, 1), (135, 3), (136, 0), (137, 0), (138, 3), (139, 2), (13, 2), (140, 3), (141, 1), (142, 1), (143, 1), (144, 2), (145, 0), (146, 3), (147, 0), (148, 0), (149, 2), (14, 0), (150, 2), (151, 3), (152, 0), (153, 3), (154, 1), (155, 3), (156, 3), (157, 0), (158, 0), (159, 3), (15, 3), (160, 3), (161, 2), (162, 3), (163, 1), (164, 0), (165, 3), (166, 1), (167, 2), (168, 3), (169, 1), (16, 0), (170, 1), (171, 3), (172, 0), (173, 0), (174, 2), (175, 1), (176, 1), (177, 1), (178, 0), (179, 0), (17, 0), (180, 2), (181, 2), (182, 3), (183, 2), (184, 2), (185, 2), (186, 0), (187, 1), (188, 1), (189, 2), (18, 0), (190, 1), (191, 3), (192, 0), (193, 1), (194, 2), (195, 1), (196, 3), (197, 3), (198, 3), (199, 2), (19, 1), (1, 1), (20, 0), (21, 1), (22, 1), (23, 2), (24, 1), (25, 2), (26, 0), (27, 3), (28, 3), (29, 2), (2, 2), (30, 2), (31, 3), (32, 3), (33, 0), (34, 2), (35, 3), (36, 1), (37, 1), (38, 2), (39, 2), (3, 2), (40, 0), (41, 1), (42, 3), (43, 1), (44, 3), (45, 0), (46, 1), (47, 0), (48, 3), (49, 3), (4, 0), (50, 0), (51, 1), (52, 0), (53, 3), (54, 1), (55, 0), (56, 0), (57, 2), (58, 1), (59, 0), (5, 3), (60, 0), (61, 2), (62, 1), (63, 0), (64, 0), (65, 2), (66, 1), (67, 0), (68, 0), (69, 1), (6, 3), (70, 1), (71, 1), (72, 2), (73, 1), (74, 2), (75, 1), (76, 3), (77, 0), (78, 2), (79, 0), (7, 2), (80, 2), (81, 2), (82, 0), (83, 1), (84, 3), (85, 3), (86, 1), (87, 0), (88, 2), (89, 2), (8, 1), (90, 3), (91, 2), (92, 1), (93, 3), (94, 0), (95, 3), (96, 2), (97, 2), (98, 2), (99, 0), (9, 3)]
label_results = sorted(label_results, key=lambda tup:tup[0])

# print(label_results)

csv_filename = 'duplicates_removed.csv'
df = pd.read_csv(csv_filename)

df = df.loc[0:199]
ci_buf = df["CI"]
# print(ci_buf[0])



buf = [None]*4
for label in label_results:
    # break
    pos, cluster = label
    ci = ci_buf[pos + 0]
    if (cluster == 0):
        print(ci, pos)
    # print(cluster)
    if buf[cluster] == None:
        buf[cluster] = (ci, ci)
    else:
        _min, _max = buf[cluster]
        if (ci < _min):
            _min = ci
        if (ci > _max):
            _max = ci
        buf[cluster] = (_min, _max)

colors = [get_color(value[1]) for value in label_results]        

buf = sorted(buf, key=lambda tup:tup[0])
print(buf)
print(Counter([p[1] for p in label_results]))


# plt.scatter([0]*len(ci_buf), ci_buf, s=0.5, c=colors)
# plt.show()